<!DOCTYPE html><html lang="en"> <head> <meta charset="UTF-8"> <meta name="viewport"
      content="width=device-width, initial-scale=1.0">
    <style>      html, body { height: 100vh; margin: 0; padding: 0; }      iframe { width: 100%; height: 100vh; border: none; }    </style>
  </head> <body> <iframe srcdoc="      
       <!DOCTYPE html>      
       <html lang=\'en\'>        
       <head>          
          <meta charset=\'UTF-8\'>          
          <meta name=\'viewport\' content=\'width=device-width, initial-scale=1.0\'>          
          <style>
          pre[class*=&quot;language-&quot;].line-numbers {	position: relative;	padding-left: 3.8em;	counter-reset: linenumber;}pre[class*=&quot;language-&quot;].line-numbers > code {	position: relative;	white-space: inherit;}.line-numbers .line-numbers-rows {	position: absolute;	pointer-events: none;	top: 0;	font-size: 100%;	left: -3.8em;	width: 3em; 	letter-spacing: -1px;	border-right: 1px solid #999;	-webkit-user-select: none;	-moz-user-select: none;	-ms-user-select: none;	user-select: none;}	.line-numbers-rows > span {		display: block;		counter-increment: linenumber;	}		.line-numbers-rows > span:before {			content: counter(linenumber);			color: #999;			display: block;			padding-right: 0.8em;			text-align: right;		}code[class*=&quot;language-&quot;],pre[class*=&quot;language-&quot;] {	color: black;	background: none;	text-shadow: 0 1px white;	font-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;	font-size: 1em;	text-align: left;	white-space: pre;	word-spacing: normal;	word-break: normal;	word-wrap: normal;	line-height: 1.5;	-moz-tab-size: 4;	-o-tab-size: 4;	tab-size: 4;	-webkit-hyphens: none;	-moz-hyphens: none;	-ms-hyphens: none;	hyphens: none;}pre[class*=&quot;language-&quot;]::-moz-selection, pre[class*=&quot;language-&quot;] ::-moz-selection,code[class*=&quot;language-&quot;]::-moz-selection, code[class*=&quot;language-&quot;] ::-moz-selection {	text-shadow: none;	background: #b3d4fc;}pre[class*=&quot;language-&quot;]::selection, pre[class*=&quot;language-&quot;] ::selection,code[class*=&quot;language-&quot;]::selection, code[class*=&quot;language-&quot;] ::selection {	text-shadow: none;	background: #b3d4fc;}@media print {	code[class*=&quot;language-&quot;],	pre[class*=&quot;language-&quot;] {		text-shadow: none;	}}pre[class*=&quot;language-&quot;] {	padding: 1em;	margin: .5em 0;	overflow: auto;}:not(pre) > code[class*=&quot;language-&quot;],pre[class*=&quot;language-&quot;] {	background: #f5f2f0;}:not(pre) > code[class*=&quot;language-&quot;] {	padding: .1em;	border-radius: .3em;	white-space: normal;}.token.comment,.token.prolog,.token.doctype,.token.cdata {	color: slategray;}.token.punctuation {	color: #999;}.token.namespace {	opacity: .7;}.token.property,.token.tag,.token.boolean,.token.number,.token.constant,.token.symbol,.token.deleted {	color: #905;}.token.selector,.token.attr-name,.token.string,.token.char,.token.builtin,.token.inserted {	color: #690;}.token.operator,.token.entity,.token.url,.language-css .token.string,.style .token.string {	color: #9a6e3a;		background: hsla(0, 0%, 100%, .5);}.token.atrule,.token.attr-value,.token.keyword {	color: #07a;}.token.function,.token.class-name {	color: #DD4A68;}.token.regex,.token.important,.token.variable {	color: #e90;}.token.important,.token.bold {	font-weight: bold;}.token.italic {	font-style: italic;}.token.entity {	cursor: help;}          
          </style>          

          <script language=\'javascript\'>            
            (function () {	if (typeof Prism === \'undefined\' || typeof document === \'undefined\') {		return;	}	/**	 * Plugin name which is used as a class name for <pre> which is activating the plugin	 *	 * @type {string}	 */	var PLUGIN_NAME = \'line-numbers\';	/**	 * Regular expression used for determining line breaks	 *	 * @type {RegExp}	 */	var NEW_LINE_EXP = /\\n(?!$)/g;	/**	 * Global exports	 */	var config = Prism.plugins.lineNumbers = {		/**		 * Get node for provided line number		 *		 * @param {Element} element pre element		 * @param {number} number line number		 * @returns {Element|undefined}		 */		getLine: function (element, number) {			if (element.tagName !== \'PRE\' || !element.classList.contains(PLUGIN_NAME)) {				return;			}			var lineNumberRows = element.querySelector(\'.line-numbers-rows\');			if (!lineNumberRows) {				return;			}			var lineNumberStart = parseInt(element.getAttribute(\'data-start\'), 10) || 1;			var lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);			if (number < lineNumberStart) {				number = lineNumberStart;			}			if (number > lineNumberEnd) {				number = lineNumberEnd;			}			var lineIndex = number - lineNumberStart;			return lineNumberRows.children[lineIndex];		},		/**		 * Resizes the line numbers of the given element.		 *		 * This function will not add line numbers. It will only resize existing ones.		 *		 * @param {HTMLElement} element A `<pre>` element with line numbers.		 * @returns {void}		 */		resize: function (element) {			resizeElements([element]);		},		/**		 * Whether the plugin can assume that the units font sizes and margins are not depended on the size of		 * the current viewport.		 *		 * Setting this to `true` will allow the plugin to do certain optimizations for better performance.		 *		 * Set this to `false` if you use any of the following CSS units: `vh`, `vw`, `vmin`, `vmax`.		 *		 * @type {boolean}		 */		assumeViewportIndependence: true	};	/**	 * Resizes the given elements.	 *	 * @param {HTMLElement[]} elements	 */	function resizeElements(elements) {		elements = elements.filter(function (e) {			var codeStyles = getStyles(e);			var whiteSpace = codeStyles[\'white-space\'];			return whiteSpace === \'pre-wrap\' || whiteSpace === \'pre-line\';		});		if (elements.length == 0) {			return;		}		var infos = elements.map(function (element) {			var codeElement = element.querySelector(\'code\');			var lineNumbersWrapper = element.querySelector(\'.line-numbers-rows\');			if (!codeElement || !lineNumbersWrapper) {				return undefined;			}			/** @type {HTMLElement} */			var lineNumberSizer = element.querySelector(\'.line-numbers-sizer\');			var codeLines = codeElement.textContent.split(NEW_LINE_EXP);			if (!lineNumberSizer) {				lineNumberSizer = document.createElement(\'span\');				lineNumberSizer.className = \'line-numbers-sizer\';				codeElement.appendChild(lineNumberSizer);			}			lineNumberSizer.innerHTML = \'0\';			lineNumberSizer.style.display = \'block\';			var oneLinerHeight = lineNumberSizer.getBoundingClientRect().height;			lineNumberSizer.innerHTML = \'\';			return {				element: element,				lines: codeLines,				lineHeights: [],				oneLinerHeight: oneLinerHeight,				sizer: lineNumberSizer,			};		}).filter(Boolean);		infos.forEach(function (info) {			var lineNumberSizer = info.sizer;			var lines = info.lines;			var lineHeights = info.lineHeights;			var oneLinerHeight = info.oneLinerHeight;			lineHeights[lines.length - 1] = undefined;			lines.forEach(function (line, index) {				if (line && line.length > 1) {					var e = lineNumberSizer.appendChild(document.createElement(\'span\'));					e.style.display = \'block\';					e.textContent = line;				} else {					lineHeights[index] = oneLinerHeight;				}			});		});		infos.forEach(function (info) {			var lineNumberSizer = info.sizer;			var lineHeights = info.lineHeights;			var childIndex = 0;			for (var i = 0; i < lineHeights.length; i++) {				if (lineHeights[i] === undefined) {					lineHeights[i] = lineNumberSizer.children[childIndex++].getBoundingClientRect().height;				}			}		});		infos.forEach(function (info) {			var lineNumberSizer = info.sizer;			var wrapper = info.element.querySelector(\'.line-numbers-rows\');			lineNumberSizer.style.display = \'none\';			lineNumberSizer.innerHTML = \'\';			info.lineHeights.forEach(function (height, lineNumber) {				wrapper.children[lineNumber].style.height = height + \'px\';			});		});	}	/**	 * Returns style declarations for the element	 *	 * @param {Element} element	 */	function getStyles(element) {		if (!element) {			return null;		}		return window.getComputedStyle ? getComputedStyle(element) : (element.currentStyle || null);	}	var lastWidth = undefined;	window.addEventListener(\'resize\', function () {		if (config.assumeViewportIndependence && lastWidth === window.innerWidth) {			return;		}		lastWidth = window.innerWidth;		resizeElements(Array.prototype.slice.call(document.querySelectorAll(\'pre.\' + PLUGIN_NAME)));	});	Prism.hooks.add(\'complete\', function (env) {		if (!env.code) {			return;		}		var code = /** @type {Element} */ (env.element);		var pre = /** @type {HTMLElement} */ (code.parentNode);		// works only for <code> wrapped inside <pre> (not inline)		if (!pre || !/pre/i.test(pre.nodeName)) {			return;		}		// Abort if line numbers already exists		if (code.querySelector(\'.line-numbers-rows\')) {			return;		}		// only add line numbers if <code> or one of its ancestors has the `line-numbers` class		if (!Prism.util.isActive(code, PLUGIN_NAME)) {			return;		}		// Remove the class \'line-numbers\' from the <code>		code.classList.remove(PLUGIN_NAME);		// Add the class \'line-numbers\' to the <pre>		pre.classList.add(PLUGIN_NAME);		var match = env.code.match(NEW_LINE_EXP);		var linesNum = match ? match.length + 1 : 1;		var lineNumbersWrapper;		var lines = new Array(linesNum + 1).join(\'<span></span>\');		lineNumbersWrapper = document.createElement(\'span\');		lineNumbersWrapper.setAttribute(\'aria-hidden\', \'true\');		lineNumbersWrapper.className = \'line-numbers-rows\';		lineNumbersWrapper.innerHTML = lines;		if (pre.hasAttribute(\'data-start\')) {			pre.style.counterReset = \'linenumber \' + (parseInt(pre.getAttribute(\'data-start\'), 10) - 1);		}		env.element.appendChild(lineNumbersWrapper);		resizeElements([pre]);		Prism.hooks.run(\'line-numbers\', env);	});	Prism.hooks.add(\'line-numbers\', function (env) {		env.plugins = env.plugins || {};		env.plugins.lineNumbers = true;	});}());          </script>        </head>        <body class="line-numbers"
      style="font-weight:bold;                      font-size:16;                     font-family:Comic Code Ligatures, Consolas, Courier New, monospace;">
      Using javascript(prism) not vue(vscode) </body> </html> "></iframe> </body></html>